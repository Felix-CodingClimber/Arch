using System;
using System.Runtime.CompilerServices;
using JobScheduler;
using Arch.Core.Utils;
using System.Diagnostics.Contracts;
using Arch.Core.Extensions;
using Arch.Core.Extensions.Internal;
using System.Diagnostics.CodeAnalysis;
using CommunityToolkit.HighPerformance;
using ArrayExtensions = CommunityToolkit.HighPerformance.ArrayExtensions;
using System.Buffers;

namespace Arch.Core
{
    public partial struct Chunk
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1>(out int t0Index, out int t1Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2>(out int t0Index, out int t1Index, out int t2Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3>(out int t0Index, out int t1Index, out int t2Index, out int t3Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index, out int t21Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
            t21Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T21>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index, out int t21Index, out int t22Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
            t21Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T21>.ComponentType.Id);
            t22Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T22>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index, out int t21Index, out int t22Index, out int t23Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
            t21Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T21>.ComponentType.Id);
            t22Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T22>.ComponentType.Id);
            t23Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T23>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index, out int t21Index, out int t22Index, out int t23Index, out int t24Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
            t21Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T21>.ComponentType.Id);
            t22Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T22>.ComponentType.Id);
            t23Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T23>.ComponentType.Id);
            t24Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T24>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        private void Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(out int t0Index, out int t1Index, out int t2Index, out int t3Index, out int t4Index, out int t5Index, out int t6Index, out int t7Index, out int t8Index, out int t9Index, out int t10Index, out int t11Index, out int t12Index, out int t13Index, out int t14Index, out int t15Index, out int t16Index, out int t17Index, out int t18Index, out int t19Index, out int t20Index, out int t21Index, out int t22Index, out int t23Index, out int t24Index, out int t25Index)
        {
            ref var componentIdToArrayFirstElement = ref ComponentIdToArrayIndex.DangerousGetReference();
            t0Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T0>.ComponentType.Id);
            t1Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T1>.ComponentType.Id);
            t2Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T2>.ComponentType.Id);
            t3Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T3>.ComponentType.Id);
            t4Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T4>.ComponentType.Id);
            t5Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T5>.ComponentType.Id);
            t6Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T6>.ComponentType.Id);
            t7Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T7>.ComponentType.Id);
            t8Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T8>.ComponentType.Id);
            t9Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T9>.ComponentType.Id);
            t10Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T10>.ComponentType.Id);
            t11Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T11>.ComponentType.Id);
            t12Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T12>.ComponentType.Id);
            t13Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T13>.ComponentType.Id);
            t14Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T14>.ComponentType.Id);
            t15Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T15>.ComponentType.Id);
            t16Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T16>.ComponentType.Id);
            t17Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T17>.ComponentType.Id);
            t18Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T18>.ComponentType.Id);
            t19Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T19>.ComponentType.Id);
            t20Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T20>.ComponentType.Id);
            t21Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T21>.ComponentType.Id);
            t22Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T22>.ComponentType.Id);
            t23Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T23>.ComponentType.Id);
            t24Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T24>.ComponentType.Id);
            t25Index = Unsafe.Add(ref componentIdToArrayFirstElement, Component<T25>.ComponentType.Id);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t20ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t20ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t20ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t21ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t20ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t21ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t20ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t21ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t22ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t20ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t21ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t22ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            var t23ComponentId = Component<T23>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t20ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t21ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t22ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t23ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t20ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t21ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t22ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t23ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            var t23ComponentId = Component<T23>.ComponentType.Id;
            var t24ComponentId = Component<T24>.ComponentType.Id;
            if (t0ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t1ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t2ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t3ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t4ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t5ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t6ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t7ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t8ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t9ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t10ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t11ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t12ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t13ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t14ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t15ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t16ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t17ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t18ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t19ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t20ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t21ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t22ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t23ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (t24ComponentId >= ComponentIdToArrayIndex.Length)
                return false;
            if (ComponentIdToArrayIndex[t0ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t1ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t2ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t3ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t4ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t5ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t6ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t7ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t8ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t9ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t10ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t11ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t12ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t13ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t14ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t15ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t16ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t17ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t18ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t19ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t20ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t21ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t22ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t23ComponentId] != 1)
                return false;
            if (ComponentIdToArrayIndex[t24ComponentId] != 1)
                return false;
            return true;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1> Get<T0, T1>(int index)
        {
            GetArray<T0, T1>(out var t0Array, out var t1Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            return new Components<T0, T1>(ref t0Component, ref t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2> Get<T0, T1, T2>(int index)
        {
            GetArray<T0, T1, T2>(out var t0Array, out var t1Array, out var t2Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            return new Components<T0, T1, T2>(ref t0Component, ref t1Component, ref t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3> Get<T0, T1, T2, T3>(int index)
        {
            GetArray<T0, T1, T2, T3>(out var t0Array, out var t1Array, out var t2Array, out var t3Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            return new Components<T0, T1, T2, T3>(ref t0Component, ref t1Component, ref t2Component, ref t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4> Get<T0, T1, T2, T3, T4>(int index)
        {
            GetArray<T0, T1, T2, T3, T4>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            return new Components<T0, T1, T2, T3, T4>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5> Get<T0, T1, T2, T3, T4, T5>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            return new Components<T0, T1, T2, T3, T4, T5>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6> Get<T0, T1, T2, T3, T4, T5, T6>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7> Get<T0, T1, T2, T3, T4, T5, T6, T7>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            ref var t23Component = ref t23Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array, out var t24Array);
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            ref var t23Component = ref t23Array[index];
            ref var t24Component = ref t24Array[index];
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1> GetRow<T0, T1>(int index)
        {
            GetArray<T0, T1>(out var t0Array, out var t1Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            return new EntityComponents<T0, T1>(ref entity, ref t0Component, ref t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2> GetRow<T0, T1, T2>(int index)
        {
            GetArray<T0, T1, T2>(out var t0Array, out var t1Array, out var t2Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            return new EntityComponents<T0, T1, T2>(ref entity, ref t0Component, ref t1Component, ref t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3> GetRow<T0, T1, T2, T3>(int index)
        {
            GetArray<T0, T1, T2, T3>(out var t0Array, out var t1Array, out var t2Array, out var t3Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            return new EntityComponents<T0, T1, T2, T3>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4> GetRow<T0, T1, T2, T3, T4>(int index)
        {
            GetArray<T0, T1, T2, T3, T4>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5> GetRow<T0, T1, T2, T3, T4, T5>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6> GetRow<T0, T1, T2, T3, T4, T5, T6>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7> GetRow<T0, T1, T2, T3, T4, T5, T6, T7>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            ref var t23Component = ref t23Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> GetRow<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(int index)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array, out var t24Array);
            ref var entity = ref Entities[index];
            ref var t0Component = ref t0Array[index];
            ref var t1Component = ref t1Array[index];
            ref var t2Component = ref t2Array[index];
            ref var t3Component = ref t3Array[index];
            ref var t4Component = ref t4Array[index];
            ref var t5Component = ref t5Array[index];
            ref var t6Component = ref t6Array[index];
            ref var t7Component = ref t7Array[index];
            ref var t8Component = ref t8Array[index];
            ref var t9Component = ref t9Array[index];
            ref var t10Component = ref t10Array[index];
            ref var t11Component = ref t11Array[index];
            ref var t12Component = ref t12Array[index];
            ref var t13Component = ref t13Array[index];
            ref var t14Component = ref t14Array[index];
            ref var t15Component = ref t15Array[index];
            ref var t16Component = ref t16Array[index];
            ref var t17Component = ref t17Array[index];
            ref var t18Component = ref t18Array[index];
            ref var t19Component = ref t19Array[index];
            ref var t20Component = ref t20Array[index];
            ref var t21Component = ref t21Array[index];
            ref var t22Component = ref t22Array[index];
            ref var t23Component = ref t23Array[index];
            ref var t24Component = ref t24Array[index];
            return new EntityComponents<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1>(int index, in T0 t0Component, in T1 t1Component)
        {
            GetArray<T0, T1>(out var t0Array, out var t1Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component)
        {
            GetArray<T0, T1, T2>(out var t0Array, out var t1Array, out var t2Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component)
        {
            GetArray<T0, T1, T2, T3>(out var t0Array, out var t1Array, out var t2Array, out var t3Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component)
        {
            GetArray<T0, T1, T2, T3, T4>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
            t20Array[index] = t20Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
            t20Array[index] = t20Component;
            t21Array[index] = t21Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
            t20Array[index] = t20Component;
            t21Array[index] = t21Component;
            t22Array[index] = t22Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
            t20Array[index] = t20Component;
            t21Array[index] = t21Component;
            t22Array[index] = t22Component;
            t23Array[index] = t23Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(int index, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component, in T24 t24Component)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array, out var t24Array);
            t0Array[index] = t0Component;
            t1Array[index] = t1Component;
            t2Array[index] = t2Component;
            t3Array[index] = t3Component;
            t4Array[index] = t4Component;
            t5Array[index] = t5Component;
            t6Array[index] = t6Component;
            t7Array[index] = t7Component;
            t8Array[index] = t8Component;
            t9Array[index] = t9Component;
            t10Array[index] = t10Component;
            t11Array[index] = t11Component;
            t12Array[index] = t12Component;
            t13Array[index] = t13Component;
            t14Array[index] = t14Component;
            t15Array[index] = t15Component;
            t16Array[index] = t16Component;
            t17Array[index] = t17Component;
            t18Array[index] = t18Component;
            t19Array[index] = t19Component;
            t20Array[index] = t20Component;
            t21Array[index] = t21Component;
            t22Array[index] = t22Component;
            t23Array[index] = t23Component;
            t24Array[index] = t24Component;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1>(out T0[] t0Array, out T1[] t1Array)
        {
            Index<T0, T1>(out var t0Index, out var t1Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array)
        {
            Index<T0, T1, T2>(out var t0Index, out var t1Index, out var t2Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array)
        {
            Index<T0, T1, T2, T3>(out var t0Index, out var t1Index, out var t2Index, out var t3Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array)
        {
            Index<T0, T1, T2, T3, T4>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array)
        {
            Index<T0, T1, T2, T3, T4, T5>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array, out T20[] t20Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index, out var t20Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
            t20Array = Unsafe.As<T20[]>(Unsafe.Add(ref arrays, t20Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array, out T20[] t20Array, out T21[] t21Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index, out var t20Index, out var t21Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
            t20Array = Unsafe.As<T20[]>(Unsafe.Add(ref arrays, t20Index));
            t21Array = Unsafe.As<T21[]>(Unsafe.Add(ref arrays, t21Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array, out T20[] t20Array, out T21[] t21Array, out T22[] t22Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index, out var t20Index, out var t21Index, out var t22Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
            t20Array = Unsafe.As<T20[]>(Unsafe.Add(ref arrays, t20Index));
            t21Array = Unsafe.As<T21[]>(Unsafe.Add(ref arrays, t21Index));
            t22Array = Unsafe.As<T22[]>(Unsafe.Add(ref arrays, t22Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array, out T20[] t20Array, out T21[] t21Array, out T22[] t22Array, out T23[] t23Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index, out var t20Index, out var t21Index, out var t22Index, out var t23Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
            t20Array = Unsafe.As<T20[]>(Unsafe.Add(ref arrays, t20Index));
            t21Array = Unsafe.As<T21[]>(Unsafe.Add(ref arrays, t21Index));
            t22Array = Unsafe.As<T22[]>(Unsafe.Add(ref arrays, t22Index));
            t23Array = Unsafe.As<T23[]>(Unsafe.Add(ref arrays, t23Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out T0[] t0Array, out T1[] t1Array, out T2[] t2Array, out T3[] t3Array, out T4[] t4Array, out T5[] t5Array, out T6[] t6Array, out T7[] t7Array, out T8[] t8Array, out T9[] t9Array, out T10[] t10Array, out T11[] t11Array, out T12[] t12Array, out T13[] t13Array, out T14[] t14Array, out T15[] t15Array, out T16[] t16Array, out T17[] t17Array, out T18[] t18Array, out T19[] t19Array, out T20[] t20Array, out T21[] t21Array, out T22[] t22Array, out T23[] t23Array, out T24[] t24Array)
        {
            Index<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Index, out var t1Index, out var t2Index, out var t3Index, out var t4Index, out var t5Index, out var t6Index, out var t7Index, out var t8Index, out var t9Index, out var t10Index, out var t11Index, out var t12Index, out var t13Index, out var t14Index, out var t15Index, out var t16Index, out var t17Index, out var t18Index, out var t19Index, out var t20Index, out var t21Index, out var t22Index, out var t23Index, out var t24Index);
            ref var arrays = ref Components.DangerousGetReference();
            t0Array = Unsafe.As<T0[]>(Unsafe.Add(ref arrays, t0Index));
            t1Array = Unsafe.As<T1[]>(Unsafe.Add(ref arrays, t1Index));
            t2Array = Unsafe.As<T2[]>(Unsafe.Add(ref arrays, t2Index));
            t3Array = Unsafe.As<T3[]>(Unsafe.Add(ref arrays, t3Index));
            t4Array = Unsafe.As<T4[]>(Unsafe.Add(ref arrays, t4Index));
            t5Array = Unsafe.As<T5[]>(Unsafe.Add(ref arrays, t5Index));
            t6Array = Unsafe.As<T6[]>(Unsafe.Add(ref arrays, t6Index));
            t7Array = Unsafe.As<T7[]>(Unsafe.Add(ref arrays, t7Index));
            t8Array = Unsafe.As<T8[]>(Unsafe.Add(ref arrays, t8Index));
            t9Array = Unsafe.As<T9[]>(Unsafe.Add(ref arrays, t9Index));
            t10Array = Unsafe.As<T10[]>(Unsafe.Add(ref arrays, t10Index));
            t11Array = Unsafe.As<T11[]>(Unsafe.Add(ref arrays, t11Index));
            t12Array = Unsafe.As<T12[]>(Unsafe.Add(ref arrays, t12Index));
            t13Array = Unsafe.As<T13[]>(Unsafe.Add(ref arrays, t13Index));
            t14Array = Unsafe.As<T14[]>(Unsafe.Add(ref arrays, t14Index));
            t15Array = Unsafe.As<T15[]>(Unsafe.Add(ref arrays, t15Index));
            t16Array = Unsafe.As<T16[]>(Unsafe.Add(ref arrays, t16Index));
            t17Array = Unsafe.As<T17[]>(Unsafe.Add(ref arrays, t17Index));
            t18Array = Unsafe.As<T18[]>(Unsafe.Add(ref arrays, t18Index));
            t19Array = Unsafe.As<T19[]>(Unsafe.Add(ref arrays, t19Index));
            t20Array = Unsafe.As<T20[]>(Unsafe.Add(ref arrays, t20Index));
            t21Array = Unsafe.As<T21[]>(Unsafe.Add(ref arrays, t21Index));
            t22Array = Unsafe.As<T22[]>(Unsafe.Add(ref arrays, t22Index));
            t23Array = Unsafe.As<T23[]>(Unsafe.Add(ref arrays, t23Index));
            t24Array = Unsafe.As<T24[]>(Unsafe.Add(ref arrays, t24Index));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1>(out Span<T0> t0Span, out Span<T1> t1Span)
        {
            GetArray<T0, T1>(out var t0Array, out var t1Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span)
        {
            GetArray<T0, T1, T2>(out var t0Array, out var t1Array, out var t2Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span)
        {
            GetArray<T0, T1, T2, T3>(out var t0Array, out var t1Array, out var t2Array, out var t3Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span)
        {
            GetArray<T0, T1, T2, T3, T4>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span, out Span<T20> t20Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
            t20Span = new Span<T20>(t20Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span, out Span<T20> t20Span, out Span<T21> t21Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
            t20Span = new Span<T20>(t20Array);
            t21Span = new Span<T21>(t21Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span, out Span<T20> t20Span, out Span<T21> t21Span, out Span<T22> t22Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
            t20Span = new Span<T20>(t20Array);
            t21Span = new Span<T21>(t21Array);
            t22Span = new Span<T22>(t22Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span, out Span<T20> t20Span, out Span<T21> t21Span, out Span<T22> t22Span, out Span<T23> t23Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
            t20Span = new Span<T20>(t20Array);
            t21Span = new Span<T21>(t21Array);
            t22Span = new Span<T22>(t22Array);
            t23Span = new Span<T23>(t23Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public void GetSpan<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out Span<T0> t0Span, out Span<T1> t1Span, out Span<T2> t2Span, out Span<T3> t3Span, out Span<T4> t4Span, out Span<T5> t5Span, out Span<T6> t6Span, out Span<T7> t7Span, out Span<T8> t8Span, out Span<T9> t9Span, out Span<T10> t10Span, out Span<T11> t11Span, out Span<T12> t12Span, out Span<T13> t13Span, out Span<T14> t14Span, out Span<T15> t15Span, out Span<T16> t16Span, out Span<T17> t17Span, out Span<T18> t18Span, out Span<T19> t19Span, out Span<T20> t20Span, out Span<T21> t21Span, out Span<T22> t22Span, out Span<T23> t23Span, out Span<T24> t24Span)
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array, out var t24Array);
            t0Span = new Span<T0>(t0Array);
            t1Span = new Span<T1>(t1Array);
            t2Span = new Span<T2>(t2Array);
            t3Span = new Span<T3>(t3Array);
            t4Span = new Span<T4>(t4Array);
            t5Span = new Span<T5>(t5Array);
            t6Span = new Span<T6>(t6Array);
            t7Span = new Span<T7>(t7Array);
            t8Span = new Span<T8>(t8Array);
            t9Span = new Span<T9>(t9Array);
            t10Span = new Span<T10>(t10Array);
            t11Span = new Span<T11>(t11Array);
            t12Span = new Span<T12>(t12Array);
            t13Span = new Span<T13>(t13Array);
            t14Span = new Span<T14>(t14Array);
            t15Span = new Span<T15>(t15Array);
            t16Span = new Span<T16>(t16Array);
            t17Span = new Span<T17>(t17Array);
            t18Span = new Span<T18>(t18Array);
            t19Span = new Span<T19>(t19Array);
            t20Span = new Span<T20>(t20Array);
            t21Span = new Span<T21>(t21Array);
            t22Span = new Span<T22>(t22Array);
            t23Span = new Span<T23>(t23Array);
            t24Span = new Span<T24>(t24Array);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1> GetFirst<T0, T1>()
        {
            GetArray<T0, T1>(out var t0Array, out var t1Array);
            return new Components<T0, T1>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2> GetFirst<T0, T1, T2>()
        {
            GetArray<T0, T1, T2>(out var t0Array, out var t1Array, out var t2Array);
            return new Components<T0, T1, T2>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3> GetFirst<T0, T1, T2, T3>()
        {
            GetArray<T0, T1, T2, T3>(out var t0Array, out var t1Array, out var t2Array, out var t3Array);
            return new Components<T0, T1, T2, T3>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4> GetFirst<T0, T1, T2, T3, T4>()
        {
            GetArray<T0, T1, T2, T3, T4>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array);
            return new Components<T0, T1, T2, T3, T4>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5> GetFirst<T0, T1, T2, T3, T4, T5>()
        {
            GetArray<T0, T1, T2, T3, T4, T5>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array);
            return new Components<T0, T1, T2, T3, T4, T5>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6> GetFirst<T0, T1, T2, T3, T4, T5, T6>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference(), ref t20Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference(), ref t20Array.DangerousGetReference(), ref t21Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference(), ref t20Array.DangerousGetReference(), ref t21Array.DangerousGetReference(), ref t22Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference(), ref t20Array.DangerousGetReference(), ref t21Array.DangerousGetReference(), ref t22Array.DangerousGetReference(), ref t23Array.DangerousGetReference());
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> GetFirst<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            GetArray<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(out var t0Array, out var t1Array, out var t2Array, out var t3Array, out var t4Array, out var t5Array, out var t6Array, out var t7Array, out var t8Array, out var t9Array, out var t10Array, out var t11Array, out var t12Array, out var t13Array, out var t14Array, out var t15Array, out var t16Array, out var t17Array, out var t18Array, out var t19Array, out var t20Array, out var t21Array, out var t22Array, out var t23Array, out var t24Array);
            return new Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref t0Array.DangerousGetReference(), ref t1Array.DangerousGetReference(), ref t2Array.DangerousGetReference(), ref t3Array.DangerousGetReference(), ref t4Array.DangerousGetReference(), ref t5Array.DangerousGetReference(), ref t6Array.DangerousGetReference(), ref t7Array.DangerousGetReference(), ref t8Array.DangerousGetReference(), ref t9Array.DangerousGetReference(), ref t10Array.DangerousGetReference(), ref t11Array.DangerousGetReference(), ref t12Array.DangerousGetReference(), ref t13Array.DangerousGetReference(), ref t14Array.DangerousGetReference(), ref t15Array.DangerousGetReference(), ref t16Array.DangerousGetReference(), ref t17Array.DangerousGetReference(), ref t18Array.DangerousGetReference(), ref t19Array.DangerousGetReference(), ref t20Array.DangerousGetReference(), ref t21Array.DangerousGetReference(), ref t22Array.DangerousGetReference(), ref t23Array.DangerousGetReference(), ref t24Array.DangerousGetReference());
        }
    }

    public partial class Archetype
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId) && BitSet.IsSet(t20ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId) && BitSet.IsSet(t20ComponentId) && BitSet.IsSet(t21ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId) && BitSet.IsSet(t20ComponentId) && BitSet.IsSet(t21ComponentId) && BitSet.IsSet(t22ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            var t23ComponentId = Component<T23>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId) && BitSet.IsSet(t20ComponentId) && BitSet.IsSet(t21ComponentId) && BitSet.IsSet(t22ComponentId) && BitSet.IsSet(t23ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            var t0ComponentId = Component<T0>.ComponentType.Id;
            var t1ComponentId = Component<T1>.ComponentType.Id;
            var t2ComponentId = Component<T2>.ComponentType.Id;
            var t3ComponentId = Component<T3>.ComponentType.Id;
            var t4ComponentId = Component<T4>.ComponentType.Id;
            var t5ComponentId = Component<T5>.ComponentType.Id;
            var t6ComponentId = Component<T6>.ComponentType.Id;
            var t7ComponentId = Component<T7>.ComponentType.Id;
            var t8ComponentId = Component<T8>.ComponentType.Id;
            var t9ComponentId = Component<T9>.ComponentType.Id;
            var t10ComponentId = Component<T10>.ComponentType.Id;
            var t11ComponentId = Component<T11>.ComponentType.Id;
            var t12ComponentId = Component<T12>.ComponentType.Id;
            var t13ComponentId = Component<T13>.ComponentType.Id;
            var t14ComponentId = Component<T14>.ComponentType.Id;
            var t15ComponentId = Component<T15>.ComponentType.Id;
            var t16ComponentId = Component<T16>.ComponentType.Id;
            var t17ComponentId = Component<T17>.ComponentType.Id;
            var t18ComponentId = Component<T18>.ComponentType.Id;
            var t19ComponentId = Component<T19>.ComponentType.Id;
            var t20ComponentId = Component<T20>.ComponentType.Id;
            var t21ComponentId = Component<T21>.ComponentType.Id;
            var t22ComponentId = Component<T22>.ComponentType.Id;
            var t23ComponentId = Component<T23>.ComponentType.Id;
            var t24ComponentId = Component<T24>.ComponentType.Id;
            return BitSet.IsSet(t0ComponentId) && BitSet.IsSet(t1ComponentId) && BitSet.IsSet(t2ComponentId) && BitSet.IsSet(t3ComponentId) && BitSet.IsSet(t4ComponentId) && BitSet.IsSet(t5ComponentId) && BitSet.IsSet(t6ComponentId) && BitSet.IsSet(t7ComponentId) && BitSet.IsSet(t8ComponentId) && BitSet.IsSet(t9ComponentId) && BitSet.IsSet(t10ComponentId) && BitSet.IsSet(t11ComponentId) && BitSet.IsSet(t12ComponentId) && BitSet.IsSet(t13ComponentId) && BitSet.IsSet(t14ComponentId) && BitSet.IsSet(t15ComponentId) && BitSet.IsSet(t16ComponentId) && BitSet.IsSet(t17ComponentId) && BitSet.IsSet(t18ComponentId) && BitSet.IsSet(t19ComponentId) && BitSet.IsSet(t20ComponentId) && BitSet.IsSet(t21ComponentId) && BitSet.IsSet(t22ComponentId) && BitSet.IsSet(t23ComponentId) && BitSet.IsSet(t24ComponentId);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1> Get<T0, T1>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2> Get<T0, T1, T2>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3> Get<T0, T1, T2, T3>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4> Get<T0, T1, T2, T3, T4>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5> Get<T0, T1, T2, T3, T4, T5>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6> Get<T0, T1, T2, T3, T4, T5, T6>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7> Get<T0, T1, T2, T3, T4, T5, T6, T7>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal unsafe Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(scoped ref Slot slot)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            return chunk.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(slot.Index);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1>(ref Slot slot, in T0 t0Component, in T1 t1Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1>(slot.Index, in t0Component, in t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2>(slot.Index, in t0Component, in t1Component, in t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref Slot slot, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component, in T24 t24Component)
        {
            ref var chunk = ref GetChunk(slot.ChunkIndex);
            chunk.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(slot.Index, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default, in T23 t23ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                    t23Component = t23ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void SetRange<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in Slot from, in Slot to, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default, in T23 t23ComponentValue = default, in T24 t24ComponentValue = default)
        {
            // Set the added component, start from the last slot and move down
            for (var chunkIndex = from.ChunkIndex; chunkIndex >= to.ChunkIndex; --chunkIndex)
            {
                ref var chunk = ref GetChunk(chunkIndex);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                // Only move within the range, depening on which chunk we are at.
                var isStart = chunkIndex == from.ChunkIndex;
                var isEnd = chunkIndex == to.ChunkIndex;
                var upper = isStart ? from.Index : chunk.Size - 1;
                var lower = isEnd ? to.Index : 0;
                for (var entityIndex = upper; entityIndex >= lower; --entityIndex)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                    t23Component = t23ComponentValue;
                    t24Component = t24ComponentValue;
                }
            }
        }
    }

    public partial class World
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0>(in T0 t0Component = default)
        {
            var types = Group<T0>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0>(ref slot, in t0Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1>(in T0 t0Component = default, in T1 t1Component = default)
        {
            var types = Group<T0, T1>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1>(ref slot, in t0Component, in t1Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default)
        {
            var types = Group<T0, T1, T2>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2>(ref slot, in t0Component, in t1Component, in t2Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default)
        {
            var types = Group<T0, T1, T2, T3>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Entity Create<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default, in T24 t24Component = default)
        {
            var types = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>.Types;
            // Recycle id or increase
            var recycle = RecycledIds.TryDequeue(out var recycledId);
            var recycled = recycle ? recycledId : new RecycledEntity(Size, 1);
            // Create new entity and put it to the back of the array
            var entity = new Entity(recycled.Id, Id);
            // Add to archetype & mapping
            var archetype = GetOrCreate(types);
            var createdChunk = archetype.Add(entity, out var slot);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
            // Resize map & Array to fit all potential new entities
            if (createdChunk)
            {
                Capacity += archetype.EntitiesPerChunk;
                EntityInfo.EnsureCapacity(Capacity);
            }

            // Map
            EntityInfo.Add(entity.Id, recycled.Version, archetype, slot);
            Size++;
            return entity;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(Entity entity)
        {
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1> Get<T0, T1>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2> Get<T0, T1, T2>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3> Get<T0, T1, T2, T3>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4> Get<T0, T1, T2, T3, T4>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5> Get<T0, T1, T2, T3, T4, T5>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6> Get<T0, T1, T2, T3, T4, T5, T6>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7> Get<T0, T1, T2, T3, T4, T5, T6, T7>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(Entity entity)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            return archetype.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref slot);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1>(Entity entity, in T0 t0Component, in T1 t1Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1>(ref slot, in t0Component, in t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2>(ref slot, in t0Component, in t1Component, in t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component, in T24 t24Component)
        {
            var slot = EntityInfo.GetSlot(entity.Id);
            var archetype = EntityInfo.GetArchetype(entity.Id);
            archetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref slot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1>(Entity entity, in T0 t0Component = default, in T1 t1Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1>(ref newSlot, in t0Component, in t1Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2>(ref newSlot, in t0Component, in t1Component, in t2Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            spanBitSet.SetBit(Component<T20>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            spanBitSet.SetBit(Component<T20>.ComponentType.Id);
            spanBitSet.SetBit(Component<T21>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            spanBitSet.SetBit(Component<T20>.ComponentType.Id);
            spanBitSet.SetBit(Component<T21>.ComponentType.Id);
            spanBitSet.SetBit(Component<T22>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            spanBitSet.SetBit(Component<T20>.ComponentType.Id);
            spanBitSet.SetBit(Component<T21>.ComponentType.Id);
            spanBitSet.SetBit(Component<T22>.ComponentType.Id);
            spanBitSet.SetBit(Component<T23>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default, in T24 t24Component = default)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.SetBit(Component<T0>.ComponentType.Id);
            spanBitSet.SetBit(Component<T1>.ComponentType.Id);
            spanBitSet.SetBit(Component<T2>.ComponentType.Id);
            spanBitSet.SetBit(Component<T3>.ComponentType.Id);
            spanBitSet.SetBit(Component<T4>.ComponentType.Id);
            spanBitSet.SetBit(Component<T5>.ComponentType.Id);
            spanBitSet.SetBit(Component<T6>.ComponentType.Id);
            spanBitSet.SetBit(Component<T7>.ComponentType.Id);
            spanBitSet.SetBit(Component<T8>.ComponentType.Id);
            spanBitSet.SetBit(Component<T9>.ComponentType.Id);
            spanBitSet.SetBit(Component<T10>.ComponentType.Id);
            spanBitSet.SetBit(Component<T11>.ComponentType.Id);
            spanBitSet.SetBit(Component<T12>.ComponentType.Id);
            spanBitSet.SetBit(Component<T13>.ComponentType.Id);
            spanBitSet.SetBit(Component<T14>.ComponentType.Id);
            spanBitSet.SetBit(Component<T15>.ComponentType.Id);
            spanBitSet.SetBit(Component<T16>.ComponentType.Id);
            spanBitSet.SetBit(Component<T17>.ComponentType.Id);
            spanBitSet.SetBit(Component<T18>.ComponentType.Id);
            spanBitSet.SetBit(Component<T19>.ComponentType.Id);
            spanBitSet.SetBit(Component<T20>.ComponentType.Id);
            spanBitSet.SetBit(Component<T21>.ComponentType.Id);
            spanBitSet.SetBit(Component<T22>.ComponentType.Id);
            spanBitSet.SetBit(Component<T23>.ComponentType.Id);
            spanBitSet.SetBit(Component<T24>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23), typeof(T24)));
            Move(entity, oldArchetype, newArchetype, out var newSlot);
            newArchetype.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(ref newSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T23>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(Entity entity)
        {
            var oldArchetype = EntityInfo.GetArchetype(entity.Id);
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[oldArchetype.BitSet.Length];
            oldArchetype.BitSet.AsSpan(stack);
            // Create a span bitset, doing it local saves us headache and gargabe
            var spanBitSet = new SpanBitSet(stack);
            spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T23>.ComponentType.Id);
            spanBitSet.ClearBit(Component<T24>.ComponentType.Id);
            if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                newArchetype = GetOrCreate(oldArchetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23), typeof(T24)));
            Move(entity, oldArchetype, newArchetype, out _);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0>(in QueryDescription description, ForEach<T0> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    forEach(ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1>(in QueryDescription description, ForEach<T0, T1> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2>(in QueryDescription description, ForEach<T0, T1, T2> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3>(in QueryDescription description, ForEach<T0, T1, T2, T3> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    forEach(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0>(in QueryDescription description, ForEachWithEntity<T0> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    forEach(in entity, ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1>(in QueryDescription description, ForEachWithEntity<T0, T1> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2>(in QueryDescription description, ForEachWithEntity<T0, T1, T2> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Query<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> forEach)
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    forEach(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0>(in QueryDescription description, ForEach<T0> forEach)
        {
            var innerJob = new ForEachJob<T0>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1>(in QueryDescription description, ForEach<T0, T1> forEach)
        {
            var innerJob = new ForEachJob<T0, T1>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2>(in QueryDescription description, ForEach<T0, T1, T2> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3>(in QueryDescription description, ForEach<T0, T1, T2, T3> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> forEach)
        {
            var innerJob = new ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0>(in QueryDescription description, ForEachWithEntity<T0> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1>(in QueryDescription description, ForEachWithEntity<T0, T1> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2>(in QueryDescription description, ForEachWithEntity<T0, T1, T2> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ParallelQuery<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> forEach)
        {
            var innerJob = new ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
            innerJob.ForEach = forEach;
            var pool = JobMeta<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<ForEachWithEntityJob<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    iForEach.Update(ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                ref var t25FirstElement = ref chunk.GetFirst<T25>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    ref var t25Component = ref Unsafe.Add(ref t25FirstElement, entityIndex);
                    iForEach.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component, ref t25Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0>(in QueryDescription description)
            where T : struct, IForEach<T0>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    t.Update(ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1>(in QueryDescription description)
            where T : struct, IForEach<T0, T1>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(in QueryDescription description)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                ref var t25FirstElement = ref chunk.GetFirst<T25>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    ref var t25Component = ref Unsafe.Add(ref t25FirstElement, entityIndex);
                    t.Update(ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component, ref t25Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
        {
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                ref var t25FirstElement = ref chunk.GetFirst<T25>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    ref var t25Component = ref Unsafe.Add(ref t25FirstElement, entityIndex);
                    iForEach.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component, ref t25Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(in QueryDescription description)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
        {
            var t = new T();
            var query = Query(in description);
            foreach (ref var chunk in query)
            {
                var chunkSize = chunk.Size;
                ref var entityFirstElement = ref chunk.Entity(0);
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                ref var t25FirstElement = ref chunk.GetFirst<T25>();
                foreach (var entityIndex in chunk)
                {
                    ref readonly var entity = ref Unsafe.Add(ref entityFirstElement, entityIndex);
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    ref var t25Component = ref Unsafe.Add(ref t25FirstElement, entityIndex);
                    t.Update(in entity, ref t0Component, ref t1Component, ref t2Component, ref t3Component, ref t4Component, ref t5Component, ref t6Component, ref t7Component, ref t8Component, ref t9Component, ref t10Component, ref t11Component, ref t12Component, ref t13Component, ref t14Component, ref t15Component, ref t16Component, ref t17Component, ref t18Component, ref t19Component, ref t20Component, ref t21Component, ref t22Component, ref t23Component, ref t24Component, ref t25Component);
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0>
        {
            var innerJob = new IForEachJob<T, T0>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1>
        {
            var innerJob = new IForEachJob<T, T0, T1>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEach<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var innerJob = new IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0>
        {
            var innerJob = new IForEachWithEntityJob<T, T0>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void InlineParallelEntityQuery<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription description, ref T iForEach)
            where T : struct, IForEachWithEntity<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        {
            var innerJob = new IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
            innerJob.ForEach = iForEach;
            var pool = JobMeta<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>.Pool;
            var query = Query(in description);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                var archetypeSize = archetype.Size;
                var part = new RangePartitioner(Environment.ProcessorCount, archetypeSize);
                foreach (var range in part)
                {
                    var job = pool.Get();
                    job.Start = range.Start;
                    job.Size = range.Length;
                    job.Chunks = archetype.Chunks;
                    job.Instance = innerJob;
                    JobsCache.Add(job);
                }

                IJob.Schedule(JobsCache, JobHandles);
                JobScheduler.JobScheduler.Instance.Flush();
                JobHandle.Complete(JobHandles);
                JobHandle.Return(JobHandles);
                // Return jobs to pool
                for (var jobIndex = 0; jobIndex < JobsCache.Count; jobIndex++)
                {
                    var job = Unsafe.As<ChunkIterationJob<IForEachWithEntityJob<T, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>>>(JobsCache[jobIndex]);
                    pool.Return(job);
                }

                JobHandles.Clear();
                JobsCache.Clear();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default, in T23 t23ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                    t23Component = t23ComponentValue;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription queryDescription, in T0 t0ComponentValue = default, in T1 t1ComponentValue = default, in T2 t2ComponentValue = default, in T3 t3ComponentValue = default, in T4 t4ComponentValue = default, in T5 t5ComponentValue = default, in T6 t6ComponentValue = default, in T7 t7ComponentValue = default, in T8 t8ComponentValue = default, in T9 t9ComponentValue = default, in T10 t10ComponentValue = default, in T11 t11ComponentValue = default, in T12 t12ComponentValue = default, in T13 t13ComponentValue = default, in T14 t14ComponentValue = default, in T15 t15ComponentValue = default, in T16 t16ComponentValue = default, in T17 t17ComponentValue = default, in T18 t18ComponentValue = default, in T19 t19ComponentValue = default, in T20 t20ComponentValue = default, in T21 t21ComponentValue = default, in T22 t22ComponentValue = default, in T23 t23ComponentValue = default, in T24 t24ComponentValue = default)
        {
            var query = Query(in queryDescription);
            foreach (ref var chunk in query)
            {
                ref var t0FirstElement = ref chunk.GetFirst<T0>();
                ref var t1FirstElement = ref chunk.GetFirst<T1>();
                ref var t2FirstElement = ref chunk.GetFirst<T2>();
                ref var t3FirstElement = ref chunk.GetFirst<T3>();
                ref var t4FirstElement = ref chunk.GetFirst<T4>();
                ref var t5FirstElement = ref chunk.GetFirst<T5>();
                ref var t6FirstElement = ref chunk.GetFirst<T6>();
                ref var t7FirstElement = ref chunk.GetFirst<T7>();
                ref var t8FirstElement = ref chunk.GetFirst<T8>();
                ref var t9FirstElement = ref chunk.GetFirst<T9>();
                ref var t10FirstElement = ref chunk.GetFirst<T10>();
                ref var t11FirstElement = ref chunk.GetFirst<T11>();
                ref var t12FirstElement = ref chunk.GetFirst<T12>();
                ref var t13FirstElement = ref chunk.GetFirst<T13>();
                ref var t14FirstElement = ref chunk.GetFirst<T14>();
                ref var t15FirstElement = ref chunk.GetFirst<T15>();
                ref var t16FirstElement = ref chunk.GetFirst<T16>();
                ref var t17FirstElement = ref chunk.GetFirst<T17>();
                ref var t18FirstElement = ref chunk.GetFirst<T18>();
                ref var t19FirstElement = ref chunk.GetFirst<T19>();
                ref var t20FirstElement = ref chunk.GetFirst<T20>();
                ref var t21FirstElement = ref chunk.GetFirst<T21>();
                ref var t22FirstElement = ref chunk.GetFirst<T22>();
                ref var t23FirstElement = ref chunk.GetFirst<T23>();
                ref var t24FirstElement = ref chunk.GetFirst<T24>();
                foreach (var entityIndex in chunk)
                {
                    ref var t0Component = ref Unsafe.Add(ref t0FirstElement, entityIndex);
                    ref var t1Component = ref Unsafe.Add(ref t1FirstElement, entityIndex);
                    ref var t2Component = ref Unsafe.Add(ref t2FirstElement, entityIndex);
                    ref var t3Component = ref Unsafe.Add(ref t3FirstElement, entityIndex);
                    ref var t4Component = ref Unsafe.Add(ref t4FirstElement, entityIndex);
                    ref var t5Component = ref Unsafe.Add(ref t5FirstElement, entityIndex);
                    ref var t6Component = ref Unsafe.Add(ref t6FirstElement, entityIndex);
                    ref var t7Component = ref Unsafe.Add(ref t7FirstElement, entityIndex);
                    ref var t8Component = ref Unsafe.Add(ref t8FirstElement, entityIndex);
                    ref var t9Component = ref Unsafe.Add(ref t9FirstElement, entityIndex);
                    ref var t10Component = ref Unsafe.Add(ref t10FirstElement, entityIndex);
                    ref var t11Component = ref Unsafe.Add(ref t11FirstElement, entityIndex);
                    ref var t12Component = ref Unsafe.Add(ref t12FirstElement, entityIndex);
                    ref var t13Component = ref Unsafe.Add(ref t13FirstElement, entityIndex);
                    ref var t14Component = ref Unsafe.Add(ref t14FirstElement, entityIndex);
                    ref var t15Component = ref Unsafe.Add(ref t15FirstElement, entityIndex);
                    ref var t16Component = ref Unsafe.Add(ref t16FirstElement, entityIndex);
                    ref var t17Component = ref Unsafe.Add(ref t17FirstElement, entityIndex);
                    ref var t18Component = ref Unsafe.Add(ref t18FirstElement, entityIndex);
                    ref var t19Component = ref Unsafe.Add(ref t19FirstElement, entityIndex);
                    ref var t20Component = ref Unsafe.Add(ref t20FirstElement, entityIndex);
                    ref var t21Component = ref Unsafe.Add(ref t21FirstElement, entityIndex);
                    ref var t22Component = ref Unsafe.Add(ref t22FirstElement, entityIndex);
                    ref var t23Component = ref Unsafe.Add(ref t23FirstElement, entityIndex);
                    ref var t24Component = ref Unsafe.Add(ref t24FirstElement, entityIndex);
                    t0Component = t0ComponentValue;
                    t1Component = t1ComponentValue;
                    t2Component = t2ComponentValue;
                    t3Component = t3ComponentValue;
                    t4Component = t4ComponentValue;
                    t5Component = t5ComponentValue;
                    t6Component = t6ComponentValue;
                    t7Component = t7ComponentValue;
                    t8Component = t8ComponentValue;
                    t9Component = t9ComponentValue;
                    t10Component = t10ComponentValue;
                    t11Component = t11ComponentValue;
                    t12Component = t12ComponentValue;
                    t13Component = t13ComponentValue;
                    t14Component = t14ComponentValue;
                    t15Component = t15ComponentValue;
                    t16Component = t16ComponentValue;
                    t17Component = t17ComponentValue;
                    t18Component = t18ComponentValue;
                    t19Component = t19ComponentValue;
                    t20Component = t20ComponentValue;
                    t21Component = t21ComponentValue;
                    t22Component = t22ComponentValue;
                    t23Component = t23ComponentValue;
                    t24Component = t24ComponentValue;
                }
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                spanBitSet.SetBit(Component<T20>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                spanBitSet.SetBit(Component<T20>.ComponentType.Id);
                spanBitSet.SetBit(Component<T21>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                spanBitSet.SetBit(Component<T20>.ComponentType.Id);
                spanBitSet.SetBit(Component<T21>.ComponentType.Id);
                spanBitSet.SetBit(Component<T22>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                spanBitSet.SetBit(Component<T20>.ComponentType.Id);
                spanBitSet.SetBit(Component<T21>.ComponentType.Id);
                spanBitSet.SetBit(Component<T22>.ComponentType.Id);
                spanBitSet.SetBit(Component<T23>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription queryDescription, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default, in T24 t24Component = default)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype with T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities == 0 || archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                archetype.BitSet.AsSpan(stack);
                var spanBitSet = new SpanBitSet(stack);
                spanBitSet.SetBit(Component<T0>.ComponentType.Id);
                spanBitSet.SetBit(Component<T1>.ComponentType.Id);
                spanBitSet.SetBit(Component<T2>.ComponentType.Id);
                spanBitSet.SetBit(Component<T3>.ComponentType.Id);
                spanBitSet.SetBit(Component<T4>.ComponentType.Id);
                spanBitSet.SetBit(Component<T5>.ComponentType.Id);
                spanBitSet.SetBit(Component<T6>.ComponentType.Id);
                spanBitSet.SetBit(Component<T7>.ComponentType.Id);
                spanBitSet.SetBit(Component<T8>.ComponentType.Id);
                spanBitSet.SetBit(Component<T9>.ComponentType.Id);
                spanBitSet.SetBit(Component<T10>.ComponentType.Id);
                spanBitSet.SetBit(Component<T11>.ComponentType.Id);
                spanBitSet.SetBit(Component<T12>.ComponentType.Id);
                spanBitSet.SetBit(Component<T13>.ComponentType.Id);
                spanBitSet.SetBit(Component<T14>.ComponentType.Id);
                spanBitSet.SetBit(Component<T15>.ComponentType.Id);
                spanBitSet.SetBit(Component<T16>.ComponentType.Id);
                spanBitSet.SetBit(Component<T17>.ComponentType.Id);
                spanBitSet.SetBit(Component<T18>.ComponentType.Id);
                spanBitSet.SetBit(Component<T19>.ComponentType.Id);
                spanBitSet.SetBit(Component<T20>.ComponentType.Id);
                spanBitSet.SetBit(Component<T21>.ComponentType.Id);
                spanBitSet.SetBit(Component<T22>.ComponentType.Id);
                spanBitSet.SetBit(Component<T23>.ComponentType.Id);
                spanBitSet.SetBit(Component<T24>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Add(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23), typeof(T24)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                // Copy, set and clear
                Archetype.Copy(archetype, newArchetype);
                var lastSlot = newArchetype.LastSlot;
                newArchetype.SetRange(in lastSlot, in newArchetypeLastSlot, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T23>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }

        [SkipLocalsInit]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(in QueryDescription queryDescription)
        {
            // BitSet to stack/span bitset, size big enough to contain ALL registered components.
            Span<uint> stack = stackalloc uint[BitSet.RequiredLength(ComponentRegistry.Size)];
            var query = Query(in queryDescription);
            foreach (var archetype in query.GetArchetypeIterator())
            {
                // Archetype without T shouldnt be skipped to prevent undefined behaviour.
                if (archetype.Entities <= 0 || !archetype.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>())
                {
                    continue;
                }

                // Create local bitset on the stack and set bits to get a new fitting bitset of the new archetype.
                var bitSet = archetype.BitSet;
                var spanBitSet = new SpanBitSet(bitSet.AsSpan(stack));
                spanBitSet.ClearBit(Component<T0>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T1>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T2>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T3>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T4>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T5>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T6>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T7>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T8>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T9>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T10>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T11>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T12>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T13>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T14>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T15>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T16>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T17>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T18>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T19>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T20>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T21>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T22>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T23>.ComponentType.Id);
                spanBitSet.ClearBit(Component<T24>.ComponentType.Id);
                // Get or create new archetype.
                if (!TryGetArchetype(spanBitSet.GetHashCode(), out var newArchetype))
                {
                    newArchetype = GetOrCreate(archetype.Types.Remove(typeof(T0), typeof(T1), typeof(T2), typeof(T3), typeof(T4), typeof(T5), typeof(T6), typeof(T7), typeof(T8), typeof(T9), typeof(T10), typeof(T11), typeof(T12), typeof(T13), typeof(T14), typeof(T15), typeof(T16), typeof(T17), typeof(T18), typeof(T19), typeof(T20), typeof(T21), typeof(T22), typeof(T23), typeof(T24)));
                }

                // Get last slots before copy, for updating entityinfo later
                var archetypeSlot = archetype.LastSlot;
                var newArchetypeLastSlot = newArchetype.LastSlot;
                Slot.Shift(ref newArchetypeLastSlot, newArchetype.EntitiesPerChunk);
                EntityInfo.Shift(archetype, archetypeSlot, newArchetype, newArchetypeLastSlot);
                Archetype.Copy(archetype, newArchetype);
                archetype.Clear();
            }
        }
    }

    public partial struct QueryDescription
    {
        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1>()
        {
            All = Group<T0, T1>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2>()
        {
            All = Group<T0, T1, T2>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3>()
        {
            All = Group<T0, T1, T2, T3>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4>()
        {
            All = Group<T0, T1, T2, T3, T4>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5>()
        {
            All = Group<T0, T1, T2, T3, T4, T5>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAll<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            All = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1>()
        {
            Any = Group<T0, T1>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2>()
        {
            Any = Group<T0, T1, T2>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3>()
        {
            Any = Group<T0, T1, T2, T3>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4>()
        {
            Any = Group<T0, T1, T2, T3, T4>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithAny<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            Any = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1>()
        {
            None = Group<T0, T1>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2>()
        {
            None = Group<T0, T1, T2>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3>()
        {
            None = Group<T0, T1, T2, T3>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4>()
        {
            None = Group<T0, T1, T2, T3, T4>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5>()
        {
            None = Group<T0, T1, T2, T3, T4, T5>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithNone<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            None = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1>()
        {
            Exclusive = Group<T0, T1>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2>()
        {
            Exclusive = Group<T0, T1, T2>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3>()
        {
            Exclusive = Group<T0, T1, T2, T3>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>.Types;
            return ref this;
        }

        [UnscopedRef]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ref QueryDescription WithExclusive<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>()
        {
            Exclusive = Group<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>.Types;
            return ref this;
        }
    }
}

namespace Arch.Core.Extensions
{
    public static partial class EntityExtensions
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static bool Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Has<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1>(this Entity entity, in T0 t0Component, in T1 t1Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1>(entity, in t0Component, in t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2>(entity, in t0Component, in t1Component, in t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3>(entity, in t0Component, in t1Component, in t2Component, in t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(this Entity entity, in T0 t0Component, in T1 t1Component, in T2 t2Component, in T3 t3Component, in T4 t4Component, in T5 t5Component, in T6 t6Component, in T7 t7Component, in T8 t8Component, in T9 t9Component, in T10 t10Component, in T11 t11Component, in T12 t12Component, in T13 t13Component, in T14 t14Component, in T15 t15Component, in T16 t16Component, in T17 t17Component, in T18 t18Component, in T19 t19Component, in T20 t20Component, in T21 t21Component, in T22 t22Component, in T23 t23Component, in T24 t24Component)
        {
            var world = World.Worlds[entity.WorldId];
            world.Set<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1> Get<T0, T1>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2> Get<T0, T1, T2>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3> Get<T0, T1, T2, T3>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4> Get<T0, T1, T2, T3, T4>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5> Get<T0, T1, T2, T3, T4, T5>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6> Get<T0, T1, T2, T3, T4, T5, T6>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7> Get<T0, T1, T2, T3, T4, T5, T6, T7>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Pure]
        public static Components<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            return world.Get<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1>(entity, in t0Component, in t1Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2>(entity, in t0Component, in t1Component, in t2Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3>(entity, in t0Component, in t1Component, in t2Component, in t3Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(this Entity entity, in T0 t0Component = default, in T1 t1Component = default, in T2 t2Component = default, in T3 t3Component = default, in T4 t4Component = default, in T5 t5Component = default, in T6 t6Component = default, in T7 t7Component = default, in T8 t8Component = default, in T9 t9Component = default, in T10 t10Component = default, in T11 t11Component = default, in T12 t12Component = default, in T13 t13Component = default, in T14 t14Component = default, in T15 t15Component = default, in T16 t16Component = default, in T17 t17Component = default, in T18 t18Component = default, in T19 t19Component = default, in T20 t20Component = default, in T21 t21Component = default, in T22 t22Component = default, in T23 t23Component = default, in T24 t24Component = default)
        {
            var world = World.Worlds[entity.WorldId];
            world.Add<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(entity, in t0Component, in t1Component, in t2Component, in t3Component, in t4Component, in t5Component, in t6Component, in t7Component, in t8Component, in t9Component, in t10Component, in t11Component, in t12Component, in t13Component, in t14Component, in t15Component, in t16Component, in t17Component, in t18Component, in t19Component, in t20Component, in t21Component, in t22Component, in t23Component, in t24Component);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(entity);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(this Entity entity)
        {
            var world = World.Worlds[entity.WorldId];
            world.Remove<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(entity);
        }
    }
}